7. Others
  - Факториал, число Фибоначчи
  - callback-функции
  - таймеры 
  - event loop

/**************************************** Test *********************************************/
1. Блок (Others part1)
- Написать Факториал числа через рекурсию.
- Вычислить число Фибоначчи через рекурсию.
- Что такое callback-функция ?
- Использовать setTimeout и clearTimeout.
- Использовать setInterval и clearInterval.
- Что такое event loop ?

/******************************************************************************************/


/*================================= Others part1 ===================================================*/

Факториал числа
Факториал числа – это число, умноженное на «себя минус один», затем на «себя минус два» и 
  так далее, до единицы. Обозначается n!
  4! = 4 * 3 * 2 * 1 = 24
  n! можно записать как n * (n-1)!

  function factorial(n) {
    return (n != 1) ? n * factorial(n - 1) : 1;
  }

  alert( factorial(5) ); // 120


Числа Фибоначчи
Последовательность чисел Фибоначчи имеет формулу Fn = Fn-1 + Fn-2. То есть, следующее 
  число получается как сумма двух предыдущих.
Первые два числа равны 1, затем 2(1+1), затем 3(1+2), 5(2+3) и так далее: 1, 1, 2, 3, 5, 8, 13, 21....
  
  function fib(n) {
    return n <= 1 ? n : fib(n - 1) + fib(n - 2);
  }

  alert( fib(3) ); // 2
  alert( fib(7) ); // 13


callback-функции
callback это функция, которая выполнится после другой функции, завершившей своё выполнение. 
  Следовательно, отсюда и название, ‘call back’. Любая функция, которая передается как 
  аргумент — именуется callback-функцией.

  el.addEventListener("click", () => { runAction()});

  function showmsg(name, status, callback) {
    if(callback && typeof callback === 'function') {
      callback(a);
    } else {
      console.log(`Hello ${name}, you status is ${status}`);
    }
  }

  showmsg("John", "Admin", () => {
    console.log(`Hello message not supported`);
  });


Функция setTimeout
Почти все реализации JavaScript имеют внутренний таймер-планировщик, который позволяет 
  задавать вызов функции через заданный период времени.

Для одноразового выполнения действий через промежуток времени предназначена функция setTimeout(). 
  Она может принимать два параметра:

  var timerId = setTimeout(someFunction, period)

Параметр period указывает на промежуток, через который будет выполняться функция из параметра 
  someFunction. А в качестве результата функция возвращает id таймера.

  function timerFunction() {
      document.write("выполнение функции setTimeout");
  }
  setTimeout(timerFunction, 3000);  

Для остановки таймера применяется функция clearTimeout().

  function timerFunction() {
      document.write("выполнение функции setTimeout");
  }
  var timerId = setTimeout(timerFunction, 3000);
  clearTimeout(timerId);


Функция setInterval
Функции setInterval() и clearInterval() работают аналогично функциям setTimeout() и clearTimeout() 
  с той лишь разницей, что setInterval() постоянно выполняет определенную функцию через промежуток времени.

  // начать повторы с интервалом 2 сек
  var timerId = setInterval(function() {
    alert( "тик" );
  }, 2000);

  // через 5 сек остановить повторы
  setTimeout(function() {
    clearInterval(timerId);
    alert( 'стоп' );
  }, 5000);


event loop
Итак, event loop, или иначе — событийный цикл.

callback queue - очередь колбеков
heap - куча, динамически роспределяемая память
stack - стек вызовов (часть движка js, v8 в хроме)

js - однопоточная среда выполнения, runtime. Это значит, что стек вызовов у него один и он
     может выполнить одно действие в единицу времени.

Call stack - хранит информацию о том, где мы сейчас в программе находимся. Как только мы начинаем
  выполнять ф-цию то кладем ее в стек. Когда уходим из функции то из стека ее тоже убираем. Тоесть
  елементы убираються и добавляються только сверху.

Переполнение stack - когда, достигаеться максимальный размер стека.

blocking - блокирование, решением блокирования являються асинхронные callbacks

Concurrency & the Event Loop - паралельности и цыкл событий

Причина по которой мы можем что-то делать в js паралельно - это потому, что браузер это больше, чем
  просто среда выполнения. js движок может делать что-то одно в единицу времени, но сам браузер 
  имеет дополнительные возможности webAPIs(потоки), им можно отпраявлять запросы с просьбой что-то сделать.
  И паралельно с движком js - они выполняют свою работу.

setTimeout() - это то что нам предоставляеться браузером, это webAPI. Этого нет в движке js.

task queue - очередь задач.

Когда какой-то webAPI заканчивает работу - запланированный callback помещаеться в очередь.

event loop - смотрит на стек и на очередь задач, если стек пуст он берет первую задачу в очереди 
             и заталкивает его в этот стек (что заставляет код выполниться).

setTimeout с задержкой 0 - создаеться для того, чтобы что-то выполнить сразу после того как стек
                           очиститься.

В асинхронном варианте все callback отправляються в очередь.

render страницы не происходит пока, какая-то ф-ция выполняеться в call-stack