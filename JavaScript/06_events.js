6.События 
- Основы работы с событиями
- Приемы для работы с событиями
- Координаты

/**************************************** Test *********************************************/
1. Блок (Основы работы с событиями)
- Что такое событие ?
- Назвать несколько видов событий.
- Что такое обработчик события ?
- Использовать атрибут HTML в качестве обработчика.
- Использовать DOM-свойство в качестве обработчика.
- Использовать слушатель в качестве обработчика.
- Удалить обработчик события

2. Блок (Приемы для работы с событиями)
- Использовать всплытие.
- Использовать захват.
- Что такое объект event, показать на практике.
- Какие свойства и методы объекта event Вы знаете ?
- Использовать делегирование
- Создать собственное событие

3. Блок (Координаты)
- Получить «внешнюю» ширину/высоту элемента.
- Получить размер элемента внутри рамок border.
- Получить размер элемента внутри рамок border с учетом прокрутки.
- Получить ширину/высоту невидимой, прокрученной в данный 
  момент, части элемента слева и сверху.
- Получить координаты элемента.
- Получить размер видимой части окна.
- Получить текущую прокрутку окна.
- Прокрутить используя абсолютные координаты.
- Прокрутить относительно текущего места

/******************************************************************************************/


/*================================= Основы работы с событиями ===================================================*/

Когда пользователь совершает действия на сайте (клик мышкой, нажатие на кнопку клавиатуры) 
  или сам браузер производит какое-то действие (загрузка страницы, изменение размеров окна), 
  происходят так называемые события .

Событие – это внутренний механизм JavaScript, который генерирует сигнал о том, что совершено 
  какое-то действие. В прикладном смысле, это позволяет вам запускать определенные функции, 
  когда происходят те или иные действия, инициированные браузером или пользователем. Примером 
  таких событий может быть окончание загрузки страницы, изменение содержимого input поля, клик 
  по элементу на странице и многое другое.

Существует множество событий и их видов: события мыши, клавиатуры, документа и т.п. Вот несколько 
  из них:
  • click – событие происходит при клике мышью;
  • mouseover – событие происходит при наведении мыши на элемент;
  • mousemove – событие происходит при перемещении курсора мыши;
  • keypress – событие происходит при нажатии пользователем на клавишу на клавиатуре;
  • scroll – событие происходит при прокручивании страницы;
  • submit – событие происходит при отправке формы;
  • focus – событие происходит при фокусировке на элементе input;
  • blur – событие происходит при потере элементом фокуса;
  • resize – событие происходит при изменении размера окна;
  • DOMContentLoaded – событие происходит, когда HTML загружен и обработан.

Обработчиком событий является функция, которая выполняется после того, как событие произошло.

Использование атрибута HTML
Данный способ заключается в том, что обработчик событий указывается непосредственно в 
  HTML разметке, на необходимом HTML элементе, с помощью специальных атрибутов событий.
  Все такие атрибуты легко запомнить, так как они совпадают с названиями самих событий, 
  только с приставкой «on». Например, onclick, onchange и т.п.

  <input type="text" onfocus="console.log('It works')">

  <button onclick="clickHandler()">Button<button>
  <script>
      function clickHandler() {
          console.log('Pressed');
      }
  <script>


Использование DOM-свойства
В DOM есть свойства, которые отвечают за события. Называются они так же, как и HTML атрибуты.
  <button>Button<button>
  <script>
      const button = document.querySelector('button');
      
      function clickHandler() {
          console.log('Pressed');
      }

      button.onclick = clickHandler;
  <script>

Большим недостатком этих способов, является то, что невозможно назначить несколько обработчиков 
  на одно событие.


С помощью метода addEventListener
Использование метода addEventListener (слушатель) является современным способом назначения события.

Сам метод принимает три параметра, два обязательных, третий опциональный.
  Первый параметр – это имя события (click, change, mouseover и т.д.).
  Второй параметр – функция-обработчик события.
  Третий параметр – стадия обработки события (всплытие или захват).

  <button>Button<button>
  <script>
      const button = document.querySelector('button');
      
      button.addEventListener('click', function() {
          console.log('Clicked');
      });
  <script>

С помощью этого способа можно добавлять несколько обработчиков событий на один элемент.
    button.addEventListener('click', clickHandler);
    button.addEventListener('click', buttonHandler);


Удаление обработчика события
Удалить обработчик события, установленного с помощью метода addEventListener, можно, 
  использовав метод removeEventListener .

Следует учитывать то, что для удаления обработчика, необходимо указывать именно установленную 
  ранее функцию-обработчик, а не просто продублировать функцию с одинаковым кодом. Для этого 
  необходимо сохранить функцию-обработчик в переменную и передать ее как параметр в метод 
  addEventListener и, при необходимости удалить обработчик, в removeEventListener.

  <button>Button<button>
  <script>
      const button = document.querySelector('button');

      let handler = function(event) {
          console.log('Clicked');
      }

      button.addEventListener('click', handler);
      button.removeEventListener('click', handler);
  <script>

Что бы удалить обработчик, установленный с помощью DOM-свойства, необходимо вместо 
  функции-обработчика назначить null.
    button.onclick = clickHandler;
    button.onclick = null;

/*================================= Приемы для работы с событиями ===================================================*/

Порядок работы событий
При разборе вопроса о назначении обработчика событий, упоминалось о том, что метод 
  addEventListener принимает три параметра, два из которых были рассмотрены. Вернемся 
  к третьему параметру метода, который определяет стадию обработки события. В него 
  передается булевое значение:
  true – означает, что событие отработает на стадии захвата (capturing);
  false – означает, что событие отработает на стадии всплытия (bubbling);

Всплытие – когда инициализируется событие, обработчик срабатывает на элементе, на котором 
  оно было проинициализировано, после чего, событие, начинает подниматься вверх, к родительским 
  элементам, и отрабатывать везде, где установлен обработчик события на это же событие.

  <div id="first">First div
      <div id="second">Second div
          <div id="third">Third div<div>
      <div>
  <div>
      
  <script>
      const div1 = document.querySelector('#first');
      const div2 = document.querySelector('#second');
      const div3 = document.querySelector('#third');

      let handler = function(event) {
          alert(event.currentTarget.id);
      }

      div1.addEventListener('click', handler, false);
      div2.addEventListener('click', handler);
      div3.addEventListener('click', handler);
  <script>
В примере выше, если кликнуть мышью на самом вложенном элементе, то выведется «third», 
  но так как событие всплывает выше, к родительским элементам, оно отработает и на 
  остальных двух тегах div. Таким образом вы так же увидите «second» и «first». Если же 
  кликнуть на div с id second, то выведется только «second» и «first».

Захват – события «погружаются» сверху-вниз.
При такой отработке событий, все происходит с точностью до наоборот, событие погружается 
  от родительского элемента вниз, до целевого, на котором событие было проинициализировано. 


Объект event
Объект event – это объект, который содержит в себе информацию про событие, которое произошло.
  <button id="main" class="main-button">Button<button>
  <script>
      const button = document.querySelector('button');

      let handler = function(event) {
          console.log(event);
      }

      button.addEventListener('click', handler);
  <script>

Пройдемся по некоторым из них.Свойства:
  • event.target – целевой элемент на котором событие было проинициализировано;
  • event.currentTarget – элемент на котором в данный момент отработало событие и вызвался обработчик;
  • event.type – тип события;
  • event.clientX и event.clientY – координаты курсора, относительно окна, в момент срабатывания события.

target – попадает элемент на котором непосредственно произошло событие, например, кликнул пользователь.

Кроме свойств, объект события содержит в себе и методы, рассмотрим некоторые из них:
  • event.stopPropagation() – прекращение всплытия или захвата события;
  • event.stopImmediatePropagation() – кроме прекращения всплытия или захвата 
    события, препятствует выполнению всех событий на текущем элементе.
  • event.preventDefault() – предотвращает стандартное поведение браузера.

Делегирование события
Суть подхода заключается в том, что если есть необходимость на нескольких элементах установить 
  одинаковые обработчики события, то вместо того, чтобы назначать функцию-обработчик отдельно 
  на каждом элементе, ставится один обработчик на их общего родителя. С помощью event.target 
  определяется на каком элементе отработало событие.

  <div id="wrapper">    
      <div id="first">First div
          <div id="second">Second div
              <div id="third">Third div<div>
          <div>
      <div>
  <div>
      
  <script>
      const wrapper = document.querySelector('#wrapper');
      
      function handler(e) {
          console.log(e.target);
      }
    
      wrapper.addEventListener('click', handler);
  <script>


Собственные события
Современным способом для создания собственных событий является использование CustomEvent.

Данный конструктор событий принимает два параметра. Как первый параметр передается имя нового события.
  Вторым параметром является объект, в котором можно указать три свойства:

  • bubbles – возможные значения true или false, что указывает, может ли событие всплывать;
  • cancelable – возможные значения true или false, что указывает, можно ли событие отменить с 
  помощью метода stopPropagation;
  • detail – значением является вложенный объект, с помощью которого можно предоставить информацию, 
  которая будет передана вместе с событием.
  
  <input type="text" id="message">
  <br>
  <br>
  <textarea id="output"><textarea>

  <script>
      const input = document.getElementById('message');
      const output = document.getElementById('output');

      function keyPressHandler(event) {
          let value = event.currentTarget.value;

          const customEvent = new CustomEvent('listener', {
              detail: {
                  message: value
              },
              bubbles: true,
              cancelable: true
          });

          event.currentTarget.dispatchEvent(customEvent);
      }

      function messageHandler(event) {
          output.textContent = event.detail.message;
      }

      input.addEventListener('keyup', keyPressHandler);
      document.addEventListener('listener', messageHandler);
  <script>

/*================================= Координаты ===================================================*/

Размеры и прокрутка элементов
У элементов существует ряд свойств, содержащих их внешние и внутренние размеры. Мы будем 
  называть их «метриками».

Метрики, в отличие от свойств CSS, содержат числа, всегда в пикселях и без единиц измерения на конце.
  <div class="box"><div>
  let box = document.querySelector('.box');

  let width = box.scrollWidth,
      height box.scrollHeight;

  console.log(width)


offsetWidth/Height - Эти два свойства – самые простые. Они содержат «внешнюю» ширину/высоту элемента, 
                     то есть его полный размер, включая рамки border и прокрутку.

clientWidth/Height - Эти свойства – размер элемента внутри рамок border. Они включают в себя ширину 
                     содержимого width вместе с полями padding, но без прокрутки.

scrollWidth/Height - Эти свойства – аналоги clientWidth/clientHeight, но с учетом прокрутки. Свойства 
                     clientWidth/clientHeight относятся только к видимой области элемента, а 
                     scrollWidth/scrollHeight добавляют к ней прокрученную (которую не видно) по 
                     горизонтали/вертикали.

scrollLeft/scrollTop - Свойства scrollLeft/scrollTop – ширина/высота невидимой, прокрученной в данный 
                       момент, части элемента слева и сверху. scrollLeft/scrollTop можно изменять.



getBoundingClientRect()
Метод elem.getBoundingClientRect() возвращает координаты элемента, под которыми понимаются размеры 
  «воображаемого прямоугольника», который охватывает весь элемент.
  
  Координаты возвращаются в виде объекта со свойствами:
  • top – Y-координата верхней границы элемента,
  • left – X-координата левой границы,
  • right – X-координата правой границы,
  • bottom – Y-координата нижней границы.


Для получения размеров видимой части окна: document.documentElement.clientWidth/Height
Получение текущей прокрутки - document.documentElement.scrollLeft/scrollTop

window.scrollTo(pageX,pageY) – абсолютные координаты,
window.scrollBy(x,y) – прокрутить относительно текущего места.

