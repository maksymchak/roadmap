9. Others
  - Регулярные выражения


/**************************************** Test *********************************************/
1. Блок (Регулярные выражения)
- 

/******************************************************************************************/


/*================================= Регулярные выражения ===================================================*/

Регулярные выражения – мощное средство поиска и замены в строке.

С помощью регулярного выражения вы можете узнать:
 - встречаються ли какое-то конкретное слово или строка в фрагменте текста(true, false);
 - осуществить замену искомого текста на другой фрагмент текст;
 - найти не конкретную строку, а строку которая соответсвует определенному шаблону
  (например: первый символ - цифра, 6 символов, последний символ - точка)

  Синтаксис 
    /pattern/flag


//Первый вариант создания регулярного выражения
var regexp=new RegExp(шаблон,модификаторы);
//Второй вариант создания регулярного выражения
var regexp=/шаблон/модификаторы;


// - указывает на начало и конец регулярного выражения, подобно кавычкам для обозначения строк.
pattern - шаблон искомого фрагмента строки, заданный с использованием специального синтаксиса
flag - специальный модификатор, который позволяет более точно настроить способ поиска

Регулярные выражения могут иметь флаги, которые влияют на поиск.
  i - если этот флаг есть, то регэксп ищет независимо от регистра, то есть не различает между А и а.
  g - если этот флаг есть, то регэксп ищет все совпадения, иначе – только первое.
  m - многострочный режим (с переносами)

Примеры:
  /test/gi
  /test/gi
  /^t.t$/gi
  /\d{2-3}/i
  /[0-9]/
  /\d+/ig

Создание регулярного выражения
  В js регулярные выражения можно создавать двумя способами:
  - используя литерал регулярного выражения /exp/;
  - вызывв функцию конструктор RegExp.

Литерал регулярного выражения
  let exp = /start/i;          // этот подход используеться если вы заранее знаете, что
                               // что ваше выражение не будет меняться.

let str = 'Time to start';
let exp = /^s.{3}t$/i
exp.test(str);

Вызов функции конструктора RegExp  // если шаблон заранее неизвестин
  let exp = new RegExp('start', 'i');

  function findText(pattern) {
    let str = 'Time to start';
    let exp = new RegExp(pattern, 'i')
    return exp.test(str);
  }

  findText('^s.{3}t$');
  findText('Time');

Методы для работы с регулярными выражениями

  str.search(reg);
  str.match(reg);
  str.replace(reg, replacement);


str.search(reg); 
Он возвращает позицию первого совпадения или -1, если ничего не найдено.
  let str = 'Time to start';
  let exp = /to/q;
  console.log(str.search(exp)); //5


str.match(reg);
Возвращает массив совпадений и некоторую доплнительную информацию.
Если не найдено - null

  let pattern = new RegExp('t.m', 'i');
  let str = 'My name is Tom Cruise';
  let result = str.match(pattern);
  console.log(result); // ["Tom", index:11, input: "My name is Tom Cruise"];

/*================================================================*/
  var str = "ОЙ-Ой-ой";
  var result = str.match( /ой/ig );
  alert( result ); // ОЙ, Ой, ой

  //без флага g
  var str = "ОЙ-Ой-ой";
  var result = str.match( /ой/i );
  alert( result[0] ); // ОЙ  (совпадение)
  alert( result.index ); // 0 (позиция)
  alert( result.input ); // ОЙ-Ой-ой (вся поисковая строка)


str.replace(reg, replacement); 
Осуществляет поиск строки или ругулярного выражения с последующей заменой на другую строку
  // заменить дефис на двоеточие
  alert( '12-34-56'.replace( /-/g, ":" ) )  // 12:34:56

В строке для замены можно использовать специальные символы:

Спецсимволы Действие в строке замены
/*$$  Вставляет "$".
  $&  Вставляет всё найденное совпадение.
  $`  Вставляет часть строки до совпадения.
  $'  Вставляет часть строки после совпадения.
  $*n*  где n -- цифра или двузначное число, обозначает n-ю по счёту скобку, если считать слева-направо.*/

let str = 'My name is Tom Cruise';
let result = str.replace(/(t.m)/i, "Bruce =$1=");
console.log(result); //My name is Bruce =Tom= Cruise

Теперь переходим к методам класса RegExp.
  regexp.test(str)
  regexp.exec(str)

regexp.test(str) - метод test проверяет, есть ли хоть одно совпадение в строке str.
 Возвращает true/false.

regexp.exec(str)

Итоги:
str.search() - найти порядковый номер первого совпадения
str.match() - найти само совпадение или массив совпадений
str.replace() - заменить строку на другую строку
exp.test() - проверить есть ли в принципе совпадение (true/false)
exp.exec() - найти все совпадения и их позиции или найти совпадения 
             начиная с определенной позиции