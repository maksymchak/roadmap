11. Code quality
  - Отладка


/**************************************** Test *********************************************/
1. Блок (Отладка)
- Что такое отладка ?
- Выполнить команду в консоли
- Что такое breakpoints, создать его ?
- Использовать debugger
- Что такое Watch, Call Stack и Scope ?


/******************************************************************************************/


/*================================= Отладка ===================================================*/

Отладка – это процесс поиска и исправления ошибок в скрипте. 


- Работая в Chrome, откройте тестовую страницу. 
  // https://learn.javascript.ru/article/debugging-chrome/debugging/index.html
- Включите инструменты разработчика, нажав F12 (Mac: Cmd+Opt+I).
- Щёлкните по панели sources («исходный код»).
- Выберите hello.js. Вот что появится:


Интерфейс состоит из трёх зон:

1 В зоне Resources (Ресурсы) показаны файлы HTML, JavaScript, CSS, включая изображения, используемые 
    на странице. Здесь также могут быть файлы различных расширений Chrome

2 Зона Source показывает исходный код

3 Наконец, зона Information and control (Сведения и контроль) отведена для отладки, вскоре мы к 
    ней вернёмся.

При нажатии на клавишу Esc в нижней части экрана вызывается консоль, где можно вводить команды и 
  выполнять их клавишей Enter. Результат выполнения инструкций сразу же отображается в консоли.

Точки останова (breakpoints)
Точка останова – это участок кода, где отладчик автоматически приостановит исполнение JavaScript.


Пока исполнение поставлено «на паузу», мы можем просмотреть текущие значения переменных, выполнить 
  команды в консоли, одним словом, мы выполняем отладку кода.


В правой части мы можем эффективно ими управлять

- Быстро переместиться к любой точке останова в коде – нужно щёлкнуть по точке в правой части экрана.
- Временно деактивировать точку – в общем списке снимите галочку напротив ненужной в данный момент точки.
- Удалить точку – щёлкните по ней правой кнопкой мыши и выберите Remove (Удалить).

Команда Debugger
Выполнение кода можно также приостановить с помощью команды debugger прямо изнутри самого кода:
  function hello(name) {
    let phrase = `Привет, ${name}!`;

    debugger;  // <-- здесь выполнение прерывается

    say(phrase);
  }


* Watch показывает текущие значения выражений.
  // Нажмите на + и введите выражение. В процессе выполнения отладчик автоматически пересчитывает 
  //  и выводит его значение.

* Call Stack показывает последовательность вызовов функций.
  // В нашем примере отладчик работает с функцией hello(), вызванной скриптом из файла index.html (там нет 
  //  функции, поэтому вызов «анонимный»).
  // При нажатии на элемент списка (например, на «anonymous») отладчик переходит к соответствующему коду, 
  //  и нам представляется возможность его проанализировать.

* Scope показывает текущие переменные.
  // В Local отображаются локальные переменные функций, а их значения подсвечены в исходном коде.
  // В Global перечисляются глобальные переменные (т.е. объявленные за пределами функций).
  // Не обращайте пока внимание на ключевое слово this – его мы изучим чуть позже.


Приостановить выполнение скрипта можно тремя способами:
- Точками останова.
- Использованием в коде команды debugger.
- При ошибке (если инструменты разработчика открыты и опция  включена).